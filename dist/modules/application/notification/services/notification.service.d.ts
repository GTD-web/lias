import { SubscribeUsecase } from '../usecases/subscribe.usecase';
import { Employee, Notification } from '@libs/entities';
import { PushNotificationPayload } from '@src/application/notification/dtos/send-notification.dto';
import { PushSubscriptionDto } from '@src/application/notification/dtos/push-subscription.dto';
import { SendMultiNotificationUsecase } from '../usecases/sendMultiNotification.usecase';
import { ResponseNotificationDto } from '@src/application/notification/dtos/response-notification.dto';
import { PaginationData } from '@libs/dtos/paginate-response.dto';
import { PaginationQueryDto } from '@libs/dtos/paginate-query.dto';
import { GetMyNotificationUsecase } from '../usecases/getMyNotification.usecase';
import { MarkAsReadUsecase } from '../usecases/markAsRead.usecase';
import { CreateNotificationUsecase } from '../usecases/createNotification.usecase';
import { NotificationType } from '@libs/enums/notification-type.enum';
import { SaveNotificationUsecase } from '../usecases/saveNotification.usecase';
import { CreateNotificationDataDto } from '../dtos/create-notification.dto';
import { IRepositoryOptions } from '@libs/interfaces/repository.interface';
import { CreateScheduleJobUsecase } from '../usecases/createScheduleJob.usecase';
import { GetSubscriptionsUsecase } from '../usecases/getSubscriptions.usecase';
import { DeleteScheduleJobUsecase } from '../usecases/deleteScheduleJob.usecase';
import { DomainNotificationService } from '@src/domain/notification/notification.service';
import { GetSubscriptionInfoUsecase } from '../usecases/getSubscriptionInfo.usecase';
import { CreateReminderNotificationUsecase } from '../usecases/createReminderNotification.usecase';
export declare class NotificationService {
    private readonly subscribeUsecase;
    private readonly sendMultiNotificationUsecase;
    private readonly getMyNotificationUsecase;
    private readonly markAsReadUsecase;
    private readonly createNotificationUsecase;
    private readonly saveNotificationUsecase;
    private readonly createScheduleJobUsecase;
    private readonly getSubscriptionsUsecase;
    private readonly deleteScheduleJobUsecase;
    private readonly notificationService;
    private readonly getSubscriptionInfoUsecase;
    private readonly createReminderNotificationUsecase;
    constructor(subscribeUsecase: SubscribeUsecase, sendMultiNotificationUsecase: SendMultiNotificationUsecase, getMyNotificationUsecase: GetMyNotificationUsecase, markAsReadUsecase: MarkAsReadUsecase, createNotificationUsecase: CreateNotificationUsecase, saveNotificationUsecase: SaveNotificationUsecase, createScheduleJobUsecase: CreateScheduleJobUsecase, getSubscriptionsUsecase: GetSubscriptionsUsecase, deleteScheduleJobUsecase: DeleteScheduleJobUsecase, notificationService: DomainNotificationService, getSubscriptionInfoUsecase: GetSubscriptionInfoUsecase, createReminderNotificationUsecase: CreateReminderNotificationUsecase);
    onModuleInit(): Promise<void>;
    subscribe(user: Employee, subscription: PushSubscriptionDto): Promise<void>;
    sendDirectNotification(subscription: PushSubscriptionDto, payload: PushNotificationPayload): Promise<void>;
    findMyNotifications(employeeId: string, query?: PaginationQueryDto): Promise<PaginationData<ResponseNotificationDto>>;
    markAsRead(employeeId: string, notificationId: string): Promise<void>;
    findSubscription(token?: string, employeeId?: string): Promise<{
        employeeId: any;
        employeeName: any;
        subscriptions: any;
    }>;
    createNotification(notificationType: NotificationType, createNotificationDatatDto: CreateNotificationDataDto, notiTarget: string[], repositoryOptions?: IRepositoryOptions<Notification>): Promise<void>;
    sendReminderNotification(notificationType: NotificationType, createNotificationDatatDto: CreateNotificationDataDto, notiTarget: string[]): Promise<void>;
}
