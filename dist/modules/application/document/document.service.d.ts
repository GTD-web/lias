import { CreateApprovalLineUseCase } from './usecases/approval-line/create-approval-line.usecase';
import { CreateFormApprovalLineDto, UpdateFormApprovalLineDto } from './dtos/approval-line.dto';
import { FindApprovalLinesUseCase } from './usecases/approval-line/find-approval-lines.usecase';
import { CreateDocumentFormDto, CreateDocumentTypeDto, DocumentFormResponseDto, DocumentTypeResponseDto, FormApprovalLineResponseDto, UpdateDocumentFormDto, UpdateDocumentTypeDto } from './dtos';
import { Employee } from '../../../database/entities/employee.entity';
import { FindApprovalLineByIdUseCase } from './usecases/approval-line/find-approval-line-by-id.usecase';
import { UpdateApprovalLineUseCase } from './usecases/approval-line/update-approval-line.usecase';
import { DeleteApprovalLineUseCase } from './usecases/approval-line/delete-approval-line.usecase';
import { CreateFormTypeUseCase } from './usecases/form-type/create-form-type.usecase';
import { FindFormTypesUseCase } from './usecases/form-type/find-form-types.usecase';
import { FindFormTypeByIdUseCase } from './usecases/form-type/find-form-type-by-id.usecase';
import { UpdateFormTypeUseCase } from './usecases/form-type/update-form-type.usecase';
import { DeleteFormTypeUseCase } from './usecases/form-type/delete-form-type.usecase';
import { FindDocumentFormByIdUseCase } from './usecases/document-form/find-document-form-by-id.usecase';
import { CreateDocumentFormUseCase } from './usecases/document-form/create-document-form.usecase';
import { FindDocumentFormsUseCase } from './usecases/document-form/find-document-forms.usecase';
import { UpdateDocumentFormUseCase } from './usecases/document-form/update-document-form.usecase';
import { DeleteDocumentFormUseCase } from './usecases/document-form/delete-document-form.usecase';
import { PaginationData } from '../../../common/dtos/paginate-response.dto';
import { ApprovalLineType } from 'src/common/enums/approval.enum';
import { PaginationQueryDto } from 'src/common/dtos/paginate-query.dto';
export declare class DocumentService {
    private readonly createApprovalLineUseCase;
    private readonly findApprovalLinesUseCase;
    private readonly findApprovalLineByIdUseCase;
    private readonly updateApprovalLineUseCase;
    private readonly deleteApprovalLineUseCase;
    private readonly createFormTypeUseCase;
    private readonly findFormTypesUseCase;
    private readonly findFormTypeByIdUseCase;
    private readonly updateFormTypeUseCase;
    private readonly deleteFormTypeUseCase;
    private readonly createDocumentFormUseCase;
    private readonly findDocumentFormsUseCase;
    private readonly findDocumentFormByIdUseCase;
    private readonly updateDocumentFormUseCase;
    private readonly deleteDocumentFormUseCase;
    constructor(createApprovalLineUseCase: CreateApprovalLineUseCase, findApprovalLinesUseCase: FindApprovalLinesUseCase, findApprovalLineByIdUseCase: FindApprovalLineByIdUseCase, updateApprovalLineUseCase: UpdateApprovalLineUseCase, deleteApprovalLineUseCase: DeleteApprovalLineUseCase, createFormTypeUseCase: CreateFormTypeUseCase, findFormTypesUseCase: FindFormTypesUseCase, findFormTypeByIdUseCase: FindFormTypeByIdUseCase, updateFormTypeUseCase: UpdateFormTypeUseCase, deleteFormTypeUseCase: DeleteFormTypeUseCase, createDocumentFormUseCase: CreateDocumentFormUseCase, findDocumentFormsUseCase: FindDocumentFormsUseCase, findDocumentFormByIdUseCase: FindDocumentFormByIdUseCase, updateDocumentFormUseCase: UpdateDocumentFormUseCase, deleteDocumentFormUseCase: DeleteDocumentFormUseCase);
    createApprovalLine(user: Employee, dto: CreateFormApprovalLineDto): Promise<FormApprovalLineResponseDto>;
    findApprovalLines(page: number, limit: number, type?: ApprovalLineType): Promise<PaginationData<FormApprovalLineResponseDto>>;
    findApprovalLineById(id: string): Promise<FormApprovalLineResponseDto>;
    updateApprovalLine(user: Employee, dto: UpdateFormApprovalLineDto): Promise<FormApprovalLineResponseDto>;
    deleteApprovalLine(id: string): Promise<boolean>;
    createFormType(dto: CreateDocumentTypeDto): Promise<DocumentTypeResponseDto>;
    findFormTypes(): Promise<DocumentTypeResponseDto[]>;
    findFormTypeById(id: string): Promise<DocumentTypeResponseDto>;
    updateFormType(id: string, dto: UpdateDocumentTypeDto): Promise<DocumentTypeResponseDto>;
    deleteFormType(id: string): Promise<boolean>;
    createDocumentForm(dto: CreateDocumentFormDto): Promise<DocumentFormResponseDto>;
    findDocumentForms(query: PaginationQueryDto): Promise<PaginationData<DocumentFormResponseDto>>;
    findDocumentFormById(id: string): Promise<DocumentFormResponseDto>;
    updateDocumentForm(id: string, dto: UpdateDocumentFormDto): Promise<DocumentFormResponseDto>;
    deleteDocumentForm(id: string): Promise<boolean>;
}
