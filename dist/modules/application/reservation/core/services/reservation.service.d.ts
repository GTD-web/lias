import { Employee } from '@libs/entities';
import { ResourceType } from '@libs/enums/resource-type.enum';
import { PaginationQueryDto } from '@libs/dtos/paginate-query.dto';
import { PaginationData } from '@libs/dtos/paginate-response.dto';
import { CreateReservationDto } from '../dtos/create-reservation.dto';
import { CalendarResponseDto, CreateReservationResponseDto } from '../dtos/reservation-response.dto';
import { ReservationResponseDto } from '../dtos/reservation-response.dto';
import { UpdateReservationDto, ReturnVehicleDto } from '../dtos/update-reservation.dto';
import { ReservationWithRelationsResponseDto } from '../dtos/reservation-response.dto';
import { GroupedReservationResponseDto } from '../dtos/reservation-response.dto';
import { GroupedReservationWithResourceResponseDto } from '../dtos/reservation-response.dto';
import { CreateReservationUsecase } from '../usecases/create-reservation.usecase';
import { FindMyReservationListUsecase } from '../usecases/find-my-reservation-list.usecase';
import { FindResourceReservationListUsecase } from '../usecases/find-resource-reservation-list.usecase';
import { FindMyUsingReservationListUsecase } from '../usecases/find-my-using-reservation-list.usecase';
import { FindMyUpcomingReservationListUsecase } from '../usecases/find-my-upcoming-reservation-list.usecase';
import { FindMyAllSchedulesUsecase } from '../usecases/find-my-all-schedules.usecase';
import { FindReservationDetailUsecase } from '../usecases/find-reservation-detail.usecase';
import { UpdateReservationUsecase } from '../usecases/update-reservation.usecase';
import { UpdateReservationStatusUsecase } from '../usecases/update-reservation-status.usecase';
import { ReturnVehicleUsecase } from '../usecases/return-vehicle.usecase';
import { CheckReservationAccessUsecase } from '../usecases/check-reservation-access.usecase';
import { FindCalendarUsecase } from '../usecases/find-calendar.usecase';
import { DomainReservationService } from '@src/domain/reservation/reservation.service';
import { CreateReservationClosingJobUsecase } from '../usecases/create-reservation-closing-job.usecase';
export declare class ReservationService {
    private readonly createReservationUsecase;
    private readonly findMyReservationListUsecase;
    private readonly findResourceReservationListUsecase;
    private readonly findMyUsingReservationListUsecase;
    private readonly findMyUpcomingReservationListUsecase;
    private readonly findMyAllSchedulesUsecase;
    private readonly findReservationDetailUsecase;
    private readonly updateReservationUsecase;
    private readonly updateReservationStatusUsecase;
    private readonly returnVehicleUsecase;
    private readonly checkReservationAccessUsecase;
    private readonly findCalendarUsecase;
    private readonly reservationService;
    private readonly createReservationClosingJob;
    constructor(createReservationUsecase: CreateReservationUsecase, findMyReservationListUsecase: FindMyReservationListUsecase, findResourceReservationListUsecase: FindResourceReservationListUsecase, findMyUsingReservationListUsecase: FindMyUsingReservationListUsecase, findMyUpcomingReservationListUsecase: FindMyUpcomingReservationListUsecase, findMyAllSchedulesUsecase: FindMyAllSchedulesUsecase, findReservationDetailUsecase: FindReservationDetailUsecase, updateReservationUsecase: UpdateReservationUsecase, updateReservationStatusUsecase: UpdateReservationStatusUsecase, returnVehicleUsecase: ReturnVehicleUsecase, checkReservationAccessUsecase: CheckReservationAccessUsecase, findCalendarUsecase: FindCalendarUsecase, reservationService: DomainReservationService, createReservationClosingJob: CreateReservationClosingJobUsecase);
    onModuleInit(): Promise<void>;
    create(user: Employee, createDto: CreateReservationDto): Promise<CreateReservationResponseDto>;
    findMyReservationList(employeeId: string, page: number, limit: number, resourceType?: ResourceType, startDate?: string, endDate?: string): Promise<PaginationData<GroupedReservationResponseDto>>;
    findResourceReservationList(employeeId: string, resourceId: string, page: number, limit: number, month?: string, isMine?: boolean): Promise<GroupedReservationWithResourceResponseDto>;
    findMyUsingReservationList(employeeId: string): Promise<PaginationData<ReservationWithRelationsResponseDto>>;
    findMyUpcomingReservationList(employeeId: string, query: PaginationQueryDto, resourceType?: ResourceType): Promise<PaginationData<GroupedReservationResponseDto>>;
    findMyAllSchedules(employeeId: string, query: PaginationQueryDto, resourceType?: ResourceType): Promise<PaginationData<GroupedReservationResponseDto>>;
    findCalendar(user: Employee, startDate: string, endDate: string, resourceType?: ResourceType, isMine?: boolean): Promise<CalendarResponseDto>;
    findReservationDetail(user: Employee, reservationId: string): Promise<ReservationWithRelationsResponseDto>;
    updateReservation(reservationId: string, updateDto: UpdateReservationDto): Promise<ReservationResponseDto>;
    updateStatusCancel(reservationId: string): Promise<ReservationResponseDto>;
    returnVehicle(user: Employee, reservationId: string, returnDto: ReturnVehicleDto): Promise<boolean>;
    checkReservationAccess(reservationId: string, employeeId: string): Promise<void>;
}
